* Package management
#+BEGIN_SRC emacs-lisp
;; packaging
(require 'package)
(add-to-list 'package-archives'("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives'("org"          . "https://orgmode.org/elpa/"))
(add-to-list 'load-path "~/.emacs.d/lisp/")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(package-initialize)
#+END_SRC
* General settings
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
(setq backup-directory-alist '(("." . "~/.autosave")))
(setq tab-width 8)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
(setq-default indent-tabs-mode t)
#+END_SRC
* Functions
** Open an org-mode point in a seperate buffer.
#+BEGIN_SRC emacs-lisp
(defun open-point-org ()
  "Open org mode heading in another window, expand it, and narrow it"
  (interactive)
  (org-beginning-of-line)
  (setq goal-point (point))
  (call-interactively #'clone-indirect-buffer-other-window)
  (while (not (= goal-point (point)))
    (goto-char goal-point)
    (org-beginning-of-line)
    (org-cycle)
    (goto-char goal-point)
    (org-beginning-of-line))
  (call-interactively #'org-next-visible-heading)
  (narrow-to-region goal-point (point))
  (goto-char goal-point)
  (fset 'tab
	(lambda (&optional arg) "Keyboard macro." (interactive "p")
	  (kmacro-exec-ring-item (quote ([tab] 0 "%d")) arg)))
  (tab))
#+END_SRC
** Create a collapsed org point with a . (for use with org-open-point)
#+BEGIN_SRC emacs-lisp
(defun org-collapsed-point()
  "Create a point on the same level collapsed with a full stop (for use with open-point-org)"
  (interactive)
  (org-meta-return)
  (newline)
  (insert ".")
  (previous-line)
  (move-beginning-of-line nil)
  (org-cycle))
#+END_SRC
** Kill the whole line the cursor is on
#+BEGIN_SRC emacs-lisp
(defun kill-whole-line nil
  "kills the entire line on which the cursor is located, and places the 
cursor as close to its previous position as possible."
  (interactive)
  (progn
    (let ((y (current-column))
	  (a (progn (beginning-of-line) (point)))
	  (b (progn (forward-line 1) (point))))
      (kill-region a b)
      (move-to-column y))))
#+END_SRC
** Transparency
#+BEGIN_SRC emacs-lisp
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC
** split window and switch to the new window
#+BEGIN_SRC emacs-lisp
(defun split-window-below-and-switch ()
  "Split the window horizontally, then switch to the new pane."
  (interactive)
  (split-window-below)
  (other-window 1))

(defun split-window-right-and-switch ()
  "Split the window vertically, then switch to the new pane."
  (interactive)
  (split-window-right)
  (other-window 1))
#+END_SRC
* Theming
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(load-theme 'challenger-deep t )
#+END_SRC
* Keybindings
** Functions
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-M-k")        #'kill-whole-line)
(global-set-key (kbd "C-c o")        #'open-point-org)
(global-set-key (kbd "C-M-<return>") #'org-collapsed-point)
(global-set-key (kbd "C-x 2")        #'split-window-below-and-switch)
(global-set-key (kbd "C-x 3")        #'split-window-right-and-switch)
#+END_SRC
** Window manipulation
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<left>")      'shrink-window-horizontally)
(global-set-key (kbd "C-<right>")     'enlarge-window-horizontally)
(global-set-key (kbd "C-<down>")      'shrink-window)
(global-set-key (kbd "C-<up>")        'enlarge-window)
#+END_SRC
** MPD control
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-p P")         'mingus-play-pos)
(global-set-key (kbd "M-p n")         'mingus-next)
(global-set-key (kbd "M-p p")         'mingus-prev)
#+END_SRC
** Other
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a")         'org-agenda)
(global-set-key (kbd "C-x K")         'kill-buffer-and-window)
#+END_SRC
* Minor modes
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook '(lambda () ))
(add-hook 'emacs-lisp-mode-hook '(lambda () ))
(add-hook 'c-mode-common-hook '(lambda () ))
(add-hook 'org-mode-hook '(lambda (org-bullets-mode) ))
#+END_SRC
* Org Mode
#+BEGIN_SRC emacs-lisp
'(org-directory "~/org")
(setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
'(org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC
* EXWM
#+BEGIN_SRC emacs-lisp
(require 'exwm)
(require 'exwm-config)
(exwm-config-default)
#+END_SRC
