* Package management
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives'("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives'("org"          . "https://orgmode.org/elpa/"))
(add-to-list 'load-path "~/.emacs.d/lisp/")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(add-to-list 'load-path "~/.emacs.d/evil")
(package-initialize)
#+END_SRC
* General settings
Setting basic crap like tab length to 8 units and where to put autosaves.
Electric pair mode is used for autocompleting brackets.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.autosave")))
(setq tab-width 8)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
(setq-default indent-tabs-mode t)
#+END_SRC
* Functions
** Open an org-mode point in a seperate buffer.
#+BEGIN_SRC emacs-lisp
(defun org-open-point ()
  "Open org mode heading in another window, expand it, and narrow it"
  (interactive)
  (org-beginning-of-line)
  (setq goal-point (point))
  (call-interactively #'clone-indirect-buffer-other-window)
  (while (not (= goal-point (point)))
    (goto-char goal-point)
    (org-beginning-of-line)
    (org-cycle)
    (goto-char goal-point)
    (org-beginning-of-line))
  (call-interactively #'org-next-visible-heading)
  (narrow-to-region goal-point (point))
  (goto-char goal-point)
  (fset 'tab
	(lambda (&optional arg) "Keyboard macro." (interactive "p")
	  (kmacro-exec-ring-item (quote ([tab] 0 "%d")) arg)))
  (tab))
#+END_SRC
** Kill the whole line the cursor is on
#+BEGIN_SRC emacs-lisp
(defun kill-whole-line nil
  "kills the entire line on which the cursor is located, and places the 
cursor as close to its previous position as possible."
  (interactive)
  (progn
    (let ((y (current-column))
	  (a (progn (beginning-of-line) (point)))
	  (b (progn (forward-line 1) (point))))
      (kill-region a b)
      (move-to-column y))))
#+END_SRC
** Transparency
#+BEGIN_SRC emacs-lisp
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC
** split window and switch to the new window
#+BEGIN_SRC emacs-lisp
(defun split-window-below-and-switch ()
  "Split the window horizontally, then switch to the new pane."
  (interactive)
  (split-window-below)
  (other-window 1))

(defun split-window-right-and-switch ()
  "Split the window vertically, then switch to the new pane."
  (interactive)
  (split-window-right)
  (other-window 1))
#+END_SRC
** Create a collapsed org-mode point
#+BEGIN_SRC emacs-lisp
(defun org-collapsed-point () 
  (interactive)
  (let ((org-M-RET-may-split-line nil) ;don't split header line
        (header-name (read-string "New header: ")))
       (org-meta-return)
       (insert header-name "\n.")
       (previous-line)
       (org-cycle)))
#+END_SRC
** Create a collapsed org-mode point and open in new window
#+BEGIN_SRC emacs-lisp
(defun org-collapsed-point-and-open () 
  (interactive)
  (let ((org-M-RET-may-split-line nil) ;don't split header line
        (header-name (read-string "New header: ")))
       (org-meta-return)
       (insert header-name "\n.")
       (previous-line)
       (org-cycle)
       (org-open-point)))
#+END_SRC
** Stop themes messing up headings
#+BEGIN_SRC emacs-lisp
(defun my/org-mode-hook ()
  "Stop the org-level headers from increasing in height relative to the other text."
  (dolist (face '(org-level-1
                  org-level-2
                  org-level-3
                  org-level-4
                  org-level-5))
    (set-face-attribute face nil :weight 'semi-bold :height 1.0)))


#+END_SRC
** Kill line backward
#+BEGIN_SRC emacs-lisp
(defun backwards-kill-line ()
  (interactive)
  (kill-region (point) (progn (beginning-of-line) (point))))
#+END_SRC
** C-x o backwards
#+BEGIN_SRC emacs-lisp
(defun other-window-reverse (&optional x)
  (interactive "P")
  (if (equal x nil)
      (other-window -1)
    (other-window (- 0 x)) ))
#+END_SRC
** Delete stuff without overwriting kill-ring
*** Line
#+BEGIN_SRC emacs-lisp
(defun delete-line ()
  "Delete text from current position to end of line char.This command does not push text to `kill-ring'."
  (interactive)
  (delete-region
   (point)
   (progn (end-of-line 1) (point)))
  (delete-char 1))
#+END_SRC
*** Line backward
#+BEGIN_SRC emacs-lisp
(defun delete-line-backward ()
  "Delete text between the beginning of the line to the cursor position. This command does not push text to `kill-ring'."
  (interactive)
  (let (p1 p2)
    (setq p1 (point))
    (beginning-of-line 1)
    (setq p2 (point))
    (delete-region p1 p2)))
#+END_SRC
*** Word
#+BEGIN_SRC emacs-lisp
(defun delete-word (arg)
  "Delete characters forward until encountering the end of a word. With argument, do this that many times. This command does not push text to `kill-ring'."
  (interactive "p")
  (delete-region
   (point)
   (progn
     (forward-word arg)
     (point))))
#+END_SRC
*** Word backward
#+BEGIN_SRC emacs-lisp
(defun delete-word-backward (arg)
  "Delete characters backward until encountering the beginning of a word. With argument, do this that many times. This command does not push text to `kill-ring'."
  (interactive "p")
  (delete-word (- arg)))
#+END_SRC
* Theming
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(scroll-bar-mode -1)
;;(load-theme 'tango-dark t)
(fringe-mode 0)
(set-face-attribute 'region nil :background "blue")
(set-face-attribute 'region nil :foreground "white")
#+END_SRC
* Mode line
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
(setq display-time-format "%H:%M")
#+END_SRC
* Ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(setq ido-use-filename-at-point 'guess)
(setq ido-file-extensions-order '(".org" ".el" ".py" ".pl" ".c" ".md" ".markdown"))
(ido-mode 1)
#+END_SRC
* Keybindings
** Functions
The keybinds for each of my functions
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-M-k")          #'kill-whole-line)
(global-set-key (kbd "C-c o")          #'org-open-point)
(global-set-key (kbd "C-<return>")     #'org-collapsed-point)
(global-set-key (kbd "C-M-<return>")   #'org-collapsed-point-and-open)
(global-set-key (kbd "C-x 2")          'split-window-below-and-switch)
(global-set-key (kbd "C-x 3")          'split-window-right-and-switch)
(global-set-key (kbd "C-x p")          #'other-window-reverse)
(global-set-key (kbd "C-c u")          #'kill-line-reverse)
#+END_SRC
** Window manipulation
Keybindings for resizing windows
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<left>")      'shrink-window-horizontally)
(global-set-key (kbd "C-<right>")     'enlarge-window-horizontally)
(global-set-key (kbd "C-<down>")      'shrink-window)
(global-set-key (kbd "C-<up>")        'enlarge-window)
(global-set-key (kbd "C-x K")         'kill-buffer-and-window)
#+END_SRC
** MPD control
Keybindings for controlling mingus, an MPD frontend
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-p P")         'mingus-play-pos)
(global-set-key (kbd "M-p n")         'mingus-next)
(global-set-key (kbd "M-p p")         'mingus-prev)
#+END_SRC
** Other
misc keybinds that I haven't catagorized yet
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a")         'org-agenda)
(global-set-key "\M-s"                'avy-goto-char)
(global-set-key (kbd "C-c c")         'calc)
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
#+END_SRC
** Delete text
#+BEGIN_SRC emacs-lisp

(global-unset-key (kbd "C-S-k"))
(global-unset-key (kbd "C-k"))
(global-unset-key (kbd "M-d"))
(global-unset-key (kbd "<M-backspace>"))

(global-set-key (kbd "C-S-k")         #'delete-line-backward)
(global-set-key (kbd "C-k")           #'delete-line)
(global-set-key (kbd "M-d")           #'delete-word)
(global-set-key (kbd "<M-backspace>") #'delete-word-backward)
#+END_SRC
* Org Mode
set org files/folders
#+BEGIN_SRC emacs-lisp
'(org-directory "~/org")
(setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
'(org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC
use syntax highlighting in org source blocks
#+BEGIN_SRC emacs-lisp
(setq org-ssrc-fontify-natively t)
#+END_SRC
quickly adpd an Emacs Lisp source block
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
call function to stop heading sizes changing
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'my/org-mode-hook)
#+END_SRC
* Global minor modes
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
(winner-mode 1)
(global-company-mode 1)
(rainbow-mode 1)
(rainbow-delimiters-mode 1)
#+END_SRC
* Language specific minor modes
** LISP
#+BEGIN_SRC emacs-lisp
(setq lispy-mode-hooks
      '(clojure-mode-hook
        emacs-lisp-mode-hook
        lisp-mode-hook
        scheme-mode-hook))

(dolist (hook lispy-mode-hooks)
  (add-hook hook (lambda ()
                   (setq show-paren-style 'expression)
                   (paredit-mode)
                   (rainbow-delimiters-mode))))
#+END_SRC
* Hydra
Hydra is used so I don't have to press C-* a lot of commands that I use a lot

 - Switching windows in emacs
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-other-window (global-map "C-x o")
    (:body-pre (other-window))
    ("o" other-window))
#+END_SRC
 - Killing buffers
#+BEGIN_SRC emacs-lisp
  (defhydra kill-buffer (global-map "C-x k")
    (:body-pre (kill-buffer))
    ("k" kill-buffer)
    ("K" kill-buffer-and-window))
#+END_SRC
 - Cursor Movement

 - Making windows
#+BEGIN_SRC emacs-lisp
  (global-set-key
   (kbd "C-x 2")
   (defhydra hydra-split 
    (:body-pre (split-window-horizontally))
    ("2" split-window-horizontally)
    ("3" split-window-vertically)))

#+END_SRC
* Elfeed
#+BEGIN_SRC emacs-lisp
(setq elfeed-feeds
      '("https://stallman.org/rss/rss.xml"
        "https://lukesmith.xyz/rss.xml"
	"http://newsrss.bbc.co.uk/rss/newsonline_uk_edition/front_page/rss.xml"
	"https://www.sudosatirical.com/articles/index.xml"
	"http://feeds.arstechnica.com/arstechnica/index"))

#+END_SRC
