* Package management
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives'("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives'("org"          . "https://orgmode.org/elpa/"))
(add-to-list 'load-path "~/.emacs.d/lisp/")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(package-initialize)
#+END_SRC
* General settings
Setting basic crap like tab length to 8 units and where to put autosaves.
Electric pair mode is used for autocompleting brackets.
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
(setq backup-directory-alist '(("." . "~/.autosave")))
(setq tab-width 8)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
(setq-default indent-tabs-mode t)
#+END_SRC
* Functions
** Open an org-mode point in a seperate buffer.
#+BEGIN_SRC emacs-lisp
(defun org-open-point ()
  "Open org mode heading in another window, expand it, and narrow it"
  (interactive)
  (org-beginning-of-line)
  (setq goal-point (point))
  (call-interactively #'clone-indirect-buffer-other-window)
  (while (not (= goal-point (point)))
    (goto-char goal-point)
    (org-beginning-of-line)
    (org-cycle)
    (goto-char goal-point)
    (org-beginning-of-line))
  (call-interactively #'org-next-visible-heading)
  (narrow-to-region goal-point (point))
  (goto-char goal-point)
  (fset 'tab
	(lambda (&optional arg) "Keyboard macro." (interactive "p")
	  (kmacro-exec-ring-item (quote ([tab] 0 "%d")) arg)))
  (tab))
#+END_SRC
** Kill the whole line the cursor is on
#+BEGIN_SRC emacs-lisp
(defun kill-whole-line nil
  "kills the entire line on which the cursor is located, and places the 
cursor as close to its previous position as possible."
  (interactive)
  (progn
    (let ((y (current-column))
	  (a (progn (beginning-of-line) (point)))
	  (b (progn (forward-line 1) (point))))
      (kill-region a b)
      (move-to-column y))))
#+END_SRC
** Transparency
#+BEGIN_SRC emacs-lisp
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC
** split window and switch to the new window
#+BEGIN_SRC emacs-lisp
(defun split-window-below-and-switch ()
  "Split the window horizontally, then switch to the new pane."
  (interactive)
  (split-window-below)
  (other-window 1))

(defun split-window-right-and-switch ()
  "Split the window vertically, then switch to the new pane."
  (interactive)
  (split-window-right)
  (other-window 1))
#+END_SRC
** Create a collapsed org-mode point
#+BEGIN_SRC emacs-lisp
(defun org-collapsed-point () 
  (interactive)
  (let ((org-M-RET-may-split-line nil) ;don't split header line
        (header-name (read-string "New header: ")))
       (org-meta-return)
       (insert header-name "\n.")
       (previous-line)
       (org-cycle)))
#+END_SRC
** Create a collapsed org-mode point and open in new window
#+BEGIN_SRC emacs-lisp
(defun org-collapsed-point-and-open () 
  (interactive)
  (let ((org-M-RET-may-split-line nil) ;don't split header line
        (header-name (read-string "New header: ")))
       (org-meta-return)
       (insert header-name "\n.")
       (previous-line)
       (org-cycle)
       (org-open-point)))
#+END_SRC
* Theming
Disable all the window crap.
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC
Set the background and foreground colors
#+BEGIN_SRC emacs-lisp
(set-background-color "#222")
(set-foreground-color "#FFFFFF")
#+END_SRC
* Mode line
Set the colors for my mode line,
#+BEGIN_SRC emacs-lisp
(set-face-foreground 'mode-line "white")
(set-face-background 'mode-line "#444")
(set-face-background 'mode-line-inactive "#444")
(set-face-foreground 'mode-line-inactive "#888")
(set-face-attribute 'mode-line nil :box nil)
(set-face-attribute 'mode-line-inactive nil :box nil)
#+END_SRC
Set the formatting for the mode-line clock
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
(setq display-time-format "%H:%M")
#+END_SRC
* Keybindings
** Functions
The keybinds for each of my functions
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-M-k")          #'kill-whole-line)
(global-set-key (kbd "C-c o")          #'org-open-point)
(global-set-key (kbd "C-<return>")     #'org-collapsed-point)
(global-set-key (kbd "C-M-<return>")   #'org-collapsed-point-and-open)
(global-set-key (kbd "C-x 2")          #'split-window-below-and-switch)
(global-set-key (kbd "C-x 3")          #'split-window-right-and-switch)
#+END_SRC
** Window manipulation
Keybindings for resizing windows
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<left>")      'shrink-window-horizontally)
(global-set-key (kbd "C-<right>")     'enlarge-window-horizontally)
(global-set-key (kbd "C-<down>")      'shrink-window)
(global-set-key (kbd "C-<up>")        'enlarge-window)
(global-set-key (kbd "C-x K")         'kill-buffer-and-window)
#+END_SRC
** MPD control
Keybindings for controlling mingus, an MPD frontend
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-p P")         'mingus-play-pos)
(global-set-key (kbd "M-p n")         'mingus-next)
(global-set-key (kbd "M-p p")         'mingus-prev)
#+END_SRC
** Other
misc keybinds that I haven't catagorized yet
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a")         'org-agenda)

#+END_SRC
* Org Mode
set org files/folders
#+BEGIN_SRC emacs-lisp
'(org-directory "~/org")
(setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
'(org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC
enable org-bullets mode
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :init
  (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC
change the ellipsis for ⤵
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "⤵")
#+END_SRC
use syntax highlighting in org source blocks
#+BEGIN_SRC emacs-lisp
(setq org-ssrc-fontify-natively t)
#+END_SRC
quickly add an Emacs Lisp source block
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
* EXWM
#+BEGIN_SRC emacs-lisp
(require 'exwm)
(require 'exwm-config)
(exwm-config-default)
#+END_SRC
Keybindings
#+BEGIN_SRC emacs-lisp
(setq exwm-input-global-keys
      `(
        ;; Bind "s-r" to exit char-mode and fullscreen mode.
        ([?\s-r] . exwm-reset)
        ;; Bind "s-w" to switch workspace interactively.
        ([?\s-w] . exwm-workspace-switch)
        ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
        ,@(mapcar (lambda (i)
                    `(,(kbd (format "s-%d" i)) .
                      (lambda ()
                        (interactive)
                        (exwm-workspace-switch-create ,i))))
                  (number-sequence 0 9))
        ;; run dialog
        ([?\s-d] . (lambda (command)
		     (interactive (list (read-shell-command "$ ")))
		     (start-process-shell-command command nil command)))
        ;; Open a terminal
        ([s-return] . (lambda ()
		    (interactive)
		    (start-process "" nil "/usr/bin/urxvt")))))
#+END_SRC
Enable EXWM
#+BEGIN_SRC emacs-lisp
(exwm-enable)
#+END_SRC

