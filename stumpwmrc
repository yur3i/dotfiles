(in-package :stumpwm)

;; libs
(require :swank)

(set-prefix-key (kbd "C-i"))

(swank-loader:init)
(defcommand swank () ()
	    (swank:create-server :port 4004
				 :style swank:*communication-style*
				 :dont-close t)
	    (echo-string
	     (current-screen)
	     "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))

(defcommand kill-and-remove () ()
	"Kills the window and removes the frame"
	(kill)
	(remove))

(defcommand vsplit-and-switch () ()
	"Splits vertically and switches to next window"
	(vsplit)
	(fnext))

(defcommand hsplit-and-switch () ()
	"Splits horizontally and switches to next window"
	(hsplit)
	(fnext))

(defcommand hsplit-switch-open-emacs () ()
	"Splits horizontally and opens a terminal in the new window"
	(hsplit-and-switch)
	(stumpwm:run-commands "exec emacsclient -a \"\" -c"))

(defcommand vsplit-switch-open-emacs () ()
	"Splits vertically and opens a terminal in the new window"
	(vsplit-and-switch)
	(stumpwm:run-commands "exec emacsclient -a \"\" -c"))

(defcommand hsplit-switch-open-terminal () ()
	"Splits horizontally and opens a terminal in the new window"
	(hsplit-and-switch)
	(stumpwm:run-commands "exec urxvt"))

(defcommand vsplit-switch-open-terminal () ()
	"Splits vertically and opens a terminal in the new window"
	(vsplit-and-switch)
	(stumpwm:run-commands "exec urxvt"))

(defcommand hsplit-switch-open-terminal () ()
	"Splits horizontally and opens a terminal in the new window"
	(hsplit-and-switch)
	(stumpwm:run-commands "exec urxvt"))


;; keybinds
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-]") "next-in-frame")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-[") "prev-in-frame")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-n") "fnext")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-p") "fother")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-F") "fullscreen")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-RET") "exec urxvt")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-d") "exec dmenu_run")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-q") "delete")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-s") "vsplit-and-switch")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-S") "hsplit-and-switch")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-r") "remove")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-R") "kill-and-remove")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-w") "iresize")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-l") "windowlist")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-e")  "exec emacsclient -a \"\" -c")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-0") "select-window-by-number 0")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-1") "select-window-by-number 1")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-2") "select-window-by-number 2")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-3") "select-window-by-number 3")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-4") "select-window-by-number 4")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-5") "select-window-by-number 5")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-6") "select-window-by-number 6")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-7") "select-window-by-number 7")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-8") "select-window-by-number 8")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-9") "select-window-by-number 9")

(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-)") "pull 0")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-!") "pull 1")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-@") "pull 2")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-#") "pull 3")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-$") "pull 4")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-%") "pull 5")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-^") "pull 6")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-&") "pull 7")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-*") "pull 8")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "s-(") "pull 9")

(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "F8")  "exec wmctrl -xa telegram")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "F9")  "exec wmctrl -xa emacs")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "F10") "exec wmctrl -xa firefox")
(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "F11") "exec wmctrl -xa urxvt")

(stumpwm:define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioLowerVolume") "exec wmctrl -xa urxvt")

(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "f")  "exec firefox")
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "p")  "exec urxvt -e bash $HOME/projects/stuff/projectile.sh")
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "m")  "exec bash /home/yur3i/.2mon.sh")
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "s")  "exec xfce4-screenshooter")

(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "t")  "hsplit-switch-open-terminal")
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "T")  "vsplit-switch-open-terminal")
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "e")  "hsplit-switch-open-emacs")
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "E")  "vsplit-switch-open-emacs") 

(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "g")  "gnew")
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "G")  "gmove")
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "f")  "gnext")
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "b")  "gprev")
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "R")  "exec bash /home/jorde/.local/bin/reloadff.sh")
;; settings

(setf *mouse-focus-policy*  :sloppy) ;; :click :ignore :sloppy -- Focus follows mouse
(setf *window-border-style* :thin) ;; :none :thick :thin :tight -- no borders
(set-win-bg-color "#101010")
(set-focus-color "yellow")
(set-unfocus-color "black")
;; font
;(set-font (make-instance 'xft:font :family "DejaVu Sans Mono" :subfamily "Book" :size 11))

;; bar
(set-module-dir "/home/jorde/.stumpwm.d/modules/")
(load-module "cpu")
(load-module "disk")
(load-module "mem")
(load-module "battery-portable")
(load-module "maildir")

(setf *mode-line-border-width* 0)
(setf *screen-mode-line-format*
	  (list "[%n] %W"
			'(:eval (stumpwm:run-shell-command "echo" t))
			"%C | %M | BAT: %B | "
			'(:eval (stumpwm:run-shell-command "date '+%a %b %d %H:%M'" t))))
(setf stumpwm:*mode-line-background-color* "#111111")
(setf stumpwm:*mode-line-foreground-color* "#CCC")
(mode-line)
;; gaps
;; (load-module "swm-gaps")
;; (setf swm-gaps:*inner-gaps-size* 5)
;; (setf swm-gaps:*outer-gaps-size* 5)

;; wallpaper
(run-shell-command "feh --bg-fill /home/jorde/Pictures/Court-Of-Lahore/CourtOfLahore.png")

;; Audio
(setf *key-codes*
      '((162 . "XF86AudioPlay")		   ; handled by amarok (or other mp3 players)
	(164 . "XF86AudioStop")		   
	(144 . "XF86AudioPrev")
	(153 . "XF86AudioNext")
	(160 . "XF86AudioMute")
	(174 . "XF86AudioLowerVolume")	   ; we use amixer (alsa mixer) to  handle this
	(176 . "XF86AudioRaiseVolume")))

;; Map keycodes to keysyms
(mapcar (lambda (pair)
	  (let* ((keycode (car pair))
		 (keysym  (cdr pair))
		 (format-dest nil)
		 (format-dest (make-array 5 :fill-pointer 0 :adjustable t :element-type 'character)))
	    (format format-dest "xmodmap -e 'keycode ~d = ~a'" keycode keysym)
	    (run-shell-command format-dest)
	  format-dest))
	*key-codes*)

;; Volume control
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")

;; Mute
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioMute") "exec amixer set Master toggle")
(define-key stumpwm:*root-map* (stumpwm:kbd "q") "exec killall python")
